import Shortcuts
#Color: Red, #Icon: star

/*
Download media from public/private/circle/community tweets at the highest quality, save to Photos or Files or share.
2023-04-16 	v4.1 	u/gluebyte
https://routinehub.co/shortcut/7912
*/
var 4E4FA6F5-EA9F-417A-A7A0-961C7F86E9BC = """{
"version": "2023-04-16",
"id": "BE3F1DF7",
"prefversion": 5,
"filename": "Shortcuts/HiRes Tweet.json",
"defaultpref": {
	"prefversion": 5,
	"selection": [ 4, 3, 1, 1, 1, 2, 2, 1, 2, 3, 1 ]
},
"prefstring": [
	{
		"title": "Save gif as",
		"option": [ "mp4 [1/4]", "gif [2/4]", "Both mp4 and gif [3/4]", "Ask Always [4/4]" ]
	},
	{
		"title": "⤷ gif Quality",
		"option": [ "High (Requires a-Shell mini) [1/3]", "Low [2/3]", "Ask Always [3/3]" ]
	},
	{
		"title": "Quick Look",
		"option": [ "None [1/3]", "All Media [2/3]", "Only Videos and gifs [3/3]" ]
	},
	{ "title": "⤷ Ask to Continue after Quick Look" },
	{ "title": "Show List for Multiple Media" },
	{ "title": "Share" },
	{ "title": "Save to Files" },
	{ "title": "Save to Photos" },
	{ "title": "⤷ Open Photos after Save" },
	{
		"title": "Set Media Date to",
		"option": [ "Date Tweeted (Requires a-Shell mini) [1/3]", "Current Date [2/3]", "Ask Always [3/3]" ]
	},
	{ "title": "Show Notification" }
],
"option": [ "☑️", "⬜️" ],
"worker": "https://hirestweet.gluebyte.workers.dev/",
"shortcutpage": "https://routinehub.co/shortcut/7912/",
"downloadurl": "https://routinehub.co/api/v1/shortcuts/7912/versions/latest",
"→jpeg": "→jpeg",
"emptydict": {},
"emptytext": "",
"newline": "\n",
"false": false,
"true": true,
"onmy": "On My",
"settings": "⚙️  User Settings",
"account": "⭐️  Manage Accounts in Scriptable",
"quit": "🔚  Quit",
"download": "download",
"getlink": "📋 Download Media from Copied Link",
"goback": "⮐  Go Back",
"gotoweb": "🌏  Go to RoutineHub",
"dateoptions": [ "Always Date Tweeted", "Always Current Date", "Date Tweeted", "Current Date" ],
"gifoptions": [ "Always mp4 and gif", "Always gif", "Always mp4", "mp4 and gif", "gif", "mp4" ],
"gifqualityoptions": [ "Always Low", "Always High", "Low", "High" ],
"getscriptable": "📲  Get Scriptable from App Store",
"havescriptable": "✅  I have Scriptable",
"getashell": "📲  Get a-Shell mini from App Store",
"haveashell": "✅  I have a-Shell mini",
"quicklookboth": "🔎  Quick Look Both",
"getbetter": "🔸  Get Better Quality (",
"getbest": "🔶  Get Best Quality (",
"getboth": "💕  Get Both",
"continue": "💫  Continue",
"getsub": "🎞️  Download Caption",
"skip": "⏬️  Skip",
"contact": "🐧  Contact gluebyte on RoutineHub",
"downloadupdate": "👾  Download Update",
"notnow": "⮐  Not Now",
"folder": "• Media Folder: ",
"album": "• Media Album: ",
"recents": "Recents",
"msg": {
	"error1": "Cannot download media. Current account in Scriptable: @",
	"error2": "Cannot download media. Private/circle/community media can be downloaded after logging in in the next menu.",
	"error3": "Cannot download media. Please try again later or contact developer.",
	"error4": "Account error. When Twitter web opens in Scriptable, please close the window.",
	"oldpref": "\nThis shortcut is older than the settings file. Please download the latest version.\n",
	"newpref": "User settings have been updated. Please review new settings.",
	"notweeturl": "Please share a tweet.",
	"nosave": "\nMedia is not saved or shared. ’User Settings‘ menu will open.\n",
	"nomedia": "\nNo media attached to tweet.\n",
	"dateprompt": "\nChoose date of media. The free ‘a-Shell mini’ app is required for ‘Date Tweeted’:\n",
	"optionsaved": "\n✨ Option has been saved. To change settings, run ‘HiRes Twitter’ from the Shortcuts app.\n",
	"gifprompt": "\nSave gif as:\n",
	"gifqualityprompt": "\nPlease select gif quality. ‘Low’ is faster, ‘High’ requires the free ‘a-Shell mini’ app:\n",
	"scriptableprompt": "\nThis shortcut needs the free ‘Scriptable’ app.\n",
	"ashellprompt": "\nIs ‘a-Shell mini’ installed?\n",
	"gifprompt2": "\nNote: ‘Better’ may look better than ‘Best’ if color changes and movements are small across frames.\n",
	"album": "\nPlease select photo album from the following list. You can change it later in ‘User Settings’.\n",
	"subprompt": "\nVideo caption is available.\nDownloaded SRT file can be saved to Files or sent through AirDrop.\n",
	"accountsprompt": "\nAccounts logged in in Scriptable:",
	"noaccountprompt": "\nPrivate/circle/community media can be downloaded after logging in.\n",
	"settingprompt": "Tap any item to change option. To reset folder or album, turn the option off and on.",
	"locationprompt": "\nWhere do you want to save media?\n",
	"folderprompt1": "\nEnter folder name for media:\n",
	"folderprompt2": "\nEnter folder name for media. It will be created inside iCloud Drive/Shortcuts folder:\n",
	"accountprompt": "\n\nScriptable will open Twitter web.\nPlease close browser when finished.\n\n",
	"noclipboard": "\nNo Twitter link in clipboard.\n",
	"newversion": "New Version Available",
}
}"""
text("${4E4FA6F5-EA9F-417A-A7A0-961C7F86E9BC}")
getDictionaryFrom(input: Text) >> getDictionaryFrom
var mainDict = Dictionary
number(value: 0) >> number
if(DeviceDetails != nil) {
	number(value: 1) >> number 1
} >> IFResult
var OS = If Result
/*


◥◤		CHECK INPUT
*/
if(ShortcutInput != nil) { >> IFResult 1
	getItemFromList(list: ShortcutInput, type: Last Item) >> getItemFromList
	if(Item from List .contains "t.co/") {
		expandURL(url: "${Item from List}") >> expandURL
	} >> IFResult 2
	replaceText(input: "${If Result}", find: "\?.*", isRegex: true) >> twurl
	if(twurl .contains "twitter.com/") {
		replaceText(input: "ㅁ${twurl}", find: "^.*/(\d{17,}).*$", replace: "$1", isRegex: true) >> ID
		if(ID .beginsWith "ㅁ") {
			alert(alert: "${twurl}
‘${ActionOutput}’", cancel: false)
		} else {
var input = twurl
var command = Variable
		} >> IFResult 3
	} else {
		alert(alert: "${twurl}
‘${ActionOutput}’", cancel: false)
	}
} >> IFResult 4
/*


◥◤		CHECK PREF
*/
if(OS == 0) { >> IFResult 5
	replaceText(input: "${mainDict.key(filename)}", find: "Shortcuts/") >> replaceText
	setValue(key: "filename", value: "${Updated Text}", dictionary: mainDict) >> setValue
var mainDict = Dictionary
} >> IFResult 6
getFile(picker: false, path: "${mainDict.key(filename)}", error: false) >> getFile
if(File == nil) { >> IFResult 7
	getDictionaryFrom(input: mainDict) >> getDictionaryFrom 1
var pref = Dictionary
	saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile
} else { >>  1
	getDictionaryFrom(input: File) >> getDictionaryFrom 2
var pref = Dictionary
	valueFor(key: "prefversion", dictionary: pref) >> prefversion
	if(prefversion != mainDict) {
		if(prefversion > mainDict) {
			menu(, [) {
			case("mainDict (gotoweb)"):
				openURL(url: mainDict)
			} >> MenuResult
			exit()
		} >> IFResult 8
		combineText(text: pref, combine: Custom) >> combineText
		if(prefversion == 1) {
			replaceText(input: "${Combined Text}", find: "...$", replace: "2$0", isRegex: true) >> replaceText 1
		} >> IFResult 9
		if(prefversion false 3) {
			replaceText(input: "${If Result}", find: "^.", replace: "$03", isRegex: true) >> replaceText 2
		} >> IFResult 10
		if(prefversion false 4) {
			replaceText(input: "${If Result}", find: ".$", replace: "2$0", isRegex: true)
		} >> IFResult 11
		if(prefversion false 5) {
			replaceText(input: "${If Result}", find: "2(.)$", replace: "3$1", isRegex: true)
		} >> IFResult 12
		splitText(text: If Result, separator: Every Character) >> splitText
		setValue(key: "selection", value: "${Split Text.as(Number)}", dictionary: pref) >> setValue 1
		setValue(key: "prefversion", value: "${mainDict.key(prefversion)}", dictionary: Dictionary) >> setValue 2
var pref = Dictionary
		saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 1
	} else {
		if(input != nil) {
			getItemFromList(list: pref, type: Items in Range, startIndex: "6", endIndex: "8") >> getItemFromList 1
			if(Item from List .contains "1") {
				if(Item from List .contains "١") {
					alert(alert: "${mainDict.key(msg.nosave)}", cancel: false)
var command = Variable
				}
			}
		} >> IFResult 13
	} >> IFResult 14
} >> IFResult 15
/*


◥◤		CHECK SCRIPTABLE
*/
if(pref == nil) { >> IFResult 16
	menu(, [) {
	case("mainDict (getscriptable)"):
		openURL(url: "https://apps.apple.com/app/id1405459188") >> openURL
		exit()
	case("mainDict (havescriptable)"):
		openApp(id: "dk.simonbs.Scriptable")
		setValue(key: "has Scriptable", value: "1", dictionary: pref) >> setValue 3
var pref = Dictionary
		saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 2
	}
} >> IFResult 17
repeat(20) {
/*


◥◤		LOOP
*/
	if(command != ""${mainDict.key(quit)}"") {
		if(command == ""${mainDict.key(download)}"") { >> IFResult 18
/*


◥◤		DOWNLOAD
*/
var command = Variable
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
var tweetDict = Output
			if(tweetDict != nil) {
				openApp(id: "dk.simonbs.Scriptable")
				openApp(id: "com.atebits.Tweetie2")
				runShortcut(name: "HiRes Twitter", input: input)
				exit()
			}
			if(tweetDict != nil) {
				wait(seconds: tweetDict)
				runShortcut(name: "HiRes Twitter", input: input)
				exit()
			}
var version = Variable
			if(tweetDict == nil) {
				valueFor(key: "error", dictionary: tweetDict) >> error
				if(error != nil) { >> IFResult 19
					if(error .contains ""statusCode":403") {
						alert(alert: "
🛑  ${mainDict.key(msg.error4)}
", tancel: false)
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
						exit()
					}
					if(error .contains ""code":179") {
//Unable to get shortcuts action is.workflow.actions.setvariable
						if(tweetDict != nil) {
							text(text: "${tweetDict.as(Dictionary).key(me)}${Variable.as(Dictionary).key(me)}")
						} else {
							valueFor(key: "msg.error2", dictionary: mainDict)
						}
					} else {
						valueFor(key: "msg.error3", dictionary: mainDict)
					} >> IFResult 20
					alert(alert: "${input}
➡️  ${Variable}

🛑  ￼", tincel: false)
				} else {
					alert(alert: "${mainDict.key(msg.nomedia)}
${Variable.key(msg.nomedia)}", cancel: false)
				} >> IFResult 21
			} else {
				valueFor(key: "hasgif", dictionary: tweetDict) >> hasgif
				number(value: 0) >> number 2
				if(hasgif ==) { >> IFResult 22
					math(input: pref, operation: -, operand: "1") >> math
					if(Calculation Result == 3) {
						repeatEach(mainDict) {
							setName(input: Repeat Index 2, name: "${Repeat Item 2}")
						} >> RepeatResult
						choose(list: Repeat Results, prompt: "${mainDict.key(msg.gifprompt)}") >> choose
						math(input: "6", operation: -, operand: Chosen Item) >> math 1
						if(Calculation Result > 2) {
							math(input: Calculation Result, operation: -, operand: "2") >> math 2
var newSelection = Calculation Result
							getItemFromList(list: pref, type: Items in Range, startIndex: "2") >> getItemFromList 2
//Unable to get shortcuts action is.workflow.actions.appendvariable
							setValue(key: "selection", value: "${newSelection}", dictionary: pref) >> setValue 4
var pref = Dictionary
							saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 3
							alert(alert: "${mainDict.key(msg.optionsaved)}", cancel: false)
							math(input: Calculation Result, operation: -, operand: "1")
						}
					} >> IFResult 23
				} >> toGIF
				if(toGIF != 0) { >> IFResult 24
					math(input: "2", operation: -, operand: pref) >> math 3
					if(Calculation Result false 0) {
						repeatEach(mainDict) {
							setName(input: Repeat Index 2, name: "${Repeat Item 2}")
						} >> RepeatResult 1
						choose(list: Repeat Results, prompt: "${mainDict.key(msg.gifqualityprompt)}") >> choose 1
						math(input: Chosen Item, operation: -, operand: "3") >> math 4
						if(Calculation Result false 0) {
							math(input: "3", operation: -, operand: Chosen Item) >> math 5
							combineText(text: pref, combine: Custom) >> combineText 1
							replaceText(input: "${Combined Text}", find: "^(.).", replace: "$1${Calculation Result}", isRegex: true) >> replaceText 3
							splitText(text: Updated Text, separator: Every Character) >> splitText 1
							setValue(key: "selection", value: "${Split Text.as(Number)}", dictionary: pref) >> setValue 5
var pref = Dictionary
							saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 4
							alert(alert: "${mainDict.key(msg.optionsaved)}", cancel: false)
							math(input: Chosen Item, operation: -, operand: "1") >> math 6
						}
					}
				} >> GIF Quality
				valueFor(key: "selection.10", dictionary: pref) >> Media Date
				if(Media Date == 3) { >> IFResult 25
					repeatEach(mainDict) {
						setName(input: Repeat Index 2, name: "${Repeat Item 2}")
					} >> RepeatResult 2
					choose(list: Repeat Results, prompt: "${mainDict.key(msg.dateprompt)}") >> choose 2
					math(input: Chosen Item, operation: -, operand: "2") >> math 7
					if(Calculation Result false 1) {
						combineText(text: pref, combine: Custom) >> combineText 2
						replaceText(input: "${Combined Text}", find: ".(.)$", replace: "${Chosen Item}$1", isRegex: true) >> replaceText 4
						splitText(text: Updated Text, separator: Every Character) >> splitText 2
						setValue(key: "selection", value: "${Split Text.as(Number)}", dictionary: pref) >> setValue 6
var pref = Dictionary
						saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 5
						alert(alert: "${mainDict.key(msg.optionsaved)}", cancel: false)
//Unable to get shortcuts action is.workflow.actions.getvariable
					}
				} >> MediaDate
				adjustDate(duration: , date: "1970-01-01 00:00:00Z") >> adjustDate
				if(MediaDate == 1) { >> IFResult 26
					formatDate(date: "${Adjusted Date}", dStyle: Custom, custom: "'-t 'yyyyMMddHHmm.ss") >> -t MediaDate
				} >> IFResult 27
				if(pref == nil) { >> IFResult 28
					matchText(text: "${MediaDate}${ActionOutput}${GIF Quality}", regex: "^[12]1|1$|^[١٢]١|١$") >> matchText
					if(Matches != nil) {
						menu(, [) {
						case("mainDict (getashell)"):
							openURL(url: "https://apps.apple.com/app/id1543537943")
							exit()
						case("mainDict (haveashell)"):
							setValue(key: "has a-Shell mini", value: "1", dictionary: pref) >> setValue 7
var pref = Dictionary
							saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 6
						}
					}
				} >> IFResult 29
				downloadURL(url: "${tweetDict.as(Dictionary).key(url)}") >> downloadURL
				if(Contents of URL .contains " / Error") { >> IFResult 30
					quicklook(input: Contents of URL)
				} else {
var media = Contents of URL
					valueFor(key: "selection.3", dictionary: pref) >> Quick Look
					if(Quick Look != 1) { >> IFResult 31
						quicklook(input: media)
						valueFor(key: "selection.4", dictionary: pref) >> ⤷Ask after Quick Look
						if(⤷Ask after Quick Look == 1) {
							menu(, [) {
							case("mainDict (continue)"):
							case("mainDict (quit)"):
//Unable to get shortcuts action is.workflow.actions.setvariable
							}
						}
					} >> IFResult 32
					repeatEach(media) {
						getItemFromList(list: tweetDict, type: Item At Index, index: Repeat Index 2) >> getItemFromList 3
						setName(input: Repeat Item 2, name: "${Item from List}")
					} >> RepeatResult 3
var media = Repeat Results
					count(input: media) >> count
					if(Count > 1) {
						valueFor(key: "selection.5", dictionary: pref) >> Select if Multiple
						if(Select if Multiple == 1) {
							choose(list: media, multiple: true, all: true) >> choose 3
var media = Chosen Item
						} >> IFResult 33
					} >> IFResult 34
					repeatEach(media) {
var Info = Variable
						valueFor(key: "type", dictionary: Info) >> type
						if(type == "photo") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
							text(text: "${Repeat Item 2.as(Image).get(Width)} ${Variable.as(Image).get(Width)}x${Repeat Item 2.as(Image).get(Height)} (${Variable.as(Image).get(Height)})") >> text
//Unable to get shortcuts action is.workflow.actions.appendvariable
						} >> IFResult 35
						number(value: 0) >> number 3
						if(type == "video") {
							number(value: 1)
						} >> IFResult 36
						if(type == "animated_gif") {
							if(toGIF != 1) {
								number(value: 1)
							}
						} >> IFResult 37
						if(If Result == 1) {
							if(MediaDate == 2) {
								encodeAudio(media: Repeat Item 2) >> encodeAudio
								getFileOfType(input: Encoded Media, type: "public.mpeg-4") >> getFileOfType
							} else {
//Unable to get shortcuts action is.workflow.actions.getvariable
							} >> IFResult 38
//Unable to get shortcuts action is.workflow.actions.appendvariable
							text(text: "${Info.as(Dictionary).key(width)} ${Variable.as(Dictionary).key(width)}x${Info.as(Dictionary).key(height)} (${Variable.as(Dictionary).key(height)})") >> text 1
//Unable to get shortcuts action is.workflow.actions.appendvariable
						}
						if(type == "animated_gif") {
							if(toGIF != 0) { >> IFResult 39
								if(GIF Quality == 0) {
									math(input: "1", operation: /, operand: Repeat Item 2) >> math 8
									valueFor(key: "width", dictionary: Info) >> w
									valueFor(key: "height", dictionary: Info) >> h
									if(w > h) {
										makeGIF(content: Repeat Item 2, frameTime: Calculation Result, autoSize: false, height: w) >> makeGIF
									} else {
										makeGIF(content: Repeat Item 2, frameTime: Calculation Result, autoSize: false, width: h) >> makeGIF 1
									} >> IFResult 40
//Unable to get shortcuts action is.workflow.actions.appendvariable
									text(text: "${If Result.get(File Size)}${ActionOutput.get(File Size)}x${Info.as(Dictionary).key(height)} (${Variable.as(Dictionary).key(height)})") >> text 2
//Unable to get shortcuts action is.workflow.actions.appendvariable
								} else {
									setName(input: Repeat Item 2, name: "a.mp4") >> setName
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.PutFileIntent
									imageDetail(detail: Frame Rate, image: Repeat Item 2) >> imageDetail
									setValue(key: "f", value: "${Frame Rate}") >> setValue 8
									matchText(text: "${Dictionary}", regex: "(?<=:)\d+(\.\d{0,3})?") >> Frame Rate
var 3DC6F893-56CB-42FC-89DC-B3E233B67ED8 = """touch begin
rm -f done Better.gif Best.gif
hideKeyboard
echo 	🕑  PLEASE WAIT  🕓
echo
ffmpeg -v error -stats -i a.mp4 -filter_complex "[0:v]fps=￼,split[a][b];[a]palettegen=reserve_transparent=0:stats_mode=diff[p];[b][p]paletteuse=dither=floyd_steinberg" -y Better.gif
echo
ffmpeg -v error -stats -i a.mp4 -filter_complex "[0:v]fps=￼,split[a][b];[a]palettegen=reserve_transparent=0:stats_mode=single[p];[b][p]paletteuse=dither=floyd_steinberg:new=1" -y Best.gif
touch ￼ Better.gif Best.gif
touch done
echo"""
text("${3DC6F893-56CB-42FC-89DC-B3E233B67ED8}")
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
									wait(seconds: 2)
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
									if(output .beginsWith "begin") {
									} else {
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
									}
//Unable to get shortcuts action is.workflow.actions.setvariable
									number(value: 100) >> number 4
									repeat(Number) {
										if(loop .beginsWith "done") {
										} else {
											wait()
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
var loop = output
										}
									}
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
									setName(input: Better, name: "Better.gif") >> Better
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
									setName(input: Best, name: "Best.gif") >> Best
									text(text: "${Better.as(Image).get(Width)} ${ActionOutput.as(Image).get(Width)}x${Better.as(Image).get(Height)} (${ActionOutput.as(Image).get(Height)})") >> text 3
									text(text: "${Best.as(Image).get(Width)} ${ActionOutput.as(Image).get(Width)}x${Best.as(Image).get(Height)} (${ActionOutput.as(Image).get(Height)})") >> text 4
									list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Better;
                        OutputUUID = "A1995D02-5615-4F3A-B21D-F9A21C08FD12";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Best;
                        OutputUUID = "662863E4-38B8-4552-A118-97808825AF6A";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list
var loop = Variable
									repeat(10) { >> RepeatResult 4
										if(loop ==) {
var loop = Variable
											menu(, [) {
											case("mainDict (quicklookboth)"):
var loop = Variable
												quicklook(input: List)
											case("mainDict (getbetter)Better (File Size))"):
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
											case("mainDict (getbest)Best (File Size))"):
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
											case("mainDict (getboth)"):
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
											} >> MenuResult 1
										}
										nothing()
									} >> RepeatResult 5
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
								} >> IFResult 41
							} >> IFResult 42
						} >> IFResult 43
						nothing()
					} >> RepeatResult 6
					if(GIF Quality > 0) {
						openApp(id: "com.atebits.Tweetie2")
					} >> IFResult 44
					count(input: _media) >> count 1
					repeatEach(_media) {
						nothing()
						if(Count > 1) {
							text(text: " ${Repeat Index 2}")
						} >> IFResult 45
						setName(input: Repeat Item 2, name: "${tweetDict.as(Dictionary).key(user)} ${Variable.as(Dictionary).key(user)}${Adjusted Date}")
					} >> RepeatResult 7
var media = Repeat Results
					if(MediaDate == 1) { >> IFResult 46
						repeatEach(media) {
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.PutFileIntent
							text(text: "touch ${Repeat Item 2.as(File).get(File Extension)} "${Variable.as(File).get(File Extension)}.${-t MediaDate}"") >> text 5
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
							setName(input: File, name: "${Repeat Item 2.as(File).get(Name)}")
						} >> RepeatResult 8
var media = Repeat Results
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
					} >> IFResult 47
				}
			} >> IFResult 48
			if(media != nil) { >> IFResult 49
				valueFor(key: "selection.6", dictionary: pref) >> Share
				if(Share == 1) {
					share(file: media) >> share
				} >> IFResult 50
				valueFor(key: "selection.7", dictionary: pref) >> Save to Files
				if(Save to Files == 1) { >> IFResult 51
					valueFor(key: "folderlocation", dictionary: pref) >> valueFor
					if(OS > 0) {
						if(Dictionary Value == nil) {
							menu(, [) {
							case("mainDict (onmy)Device Details (Device Type)"):
								number(value: 1)
							case("iCloud Drive"):
								number(value: 2)
							case("iCloud Drive/Shortcuts"):
								number(value: 3)
							} >> MenuResult 2
							setValue(key: "folderlocation", value: "${Menu Result.as(Number)}", dictionary: pref) >> setValue 9
var pref = Dictionary
//Unable to get shortcuts action is.workflow.actions.getvariable
						} >> IFResult 52
					} >> IFResult 53
					if(If Result == 1) {
//Unable to get shortcuts action is.workflow.actions.folder
					} else {
						if(If Result == 2) {
//Unable to get shortcuts action is.workflow.actions.folder
						} else {
//Unable to get shortcuts action is.workflow.actions.folder
						}
					} >> IFResult 54
					if(pref == nil) {
						if(OS > 0) {
							valueFor(key: "msg.folderprompt1", dictionary: mainDict)
						} else {
							valueFor(key: "msg.folderprompt2", dictionary: mainDict) >> valueFor 1
						} >> IFResult 55
						askForInput(prompt: "${If Result}") >> askForInput
						setValue(key: "savefolder", value: "${Provided Input}", dictionary: pref) >> setValue 10
var pref = Dictionary
						saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 7
						if(Provided Input != nil) {
							createFolder(path: "${pref.key(savefolder)}") >> createFolder
						}
					} >> IFResult 56
					saveFile(input: media, ask: false, path: "${pref.key(savefolder)}")
				} >> IFResult 57
				valueFor(key: "selection.8", dictionary: pref) >> Save to Album
				if(Save to Album == 1) { >> IFResult 58
					valueFor(key: "album", dictionary: pref) >> album
					if(album == nil) {
						alert(alert: "${mainDict.key(msg.album)}", cancel: false)
						saveToCameraRoll(image: media, album: Ask) >> saveToCameraRoll
						getItemFromList(list: Saved Photo Media) >> getItemFromList 4
						text(text: "${Item from List}") >> text 6
						setValue(key: "album", value: "${Text}", dictionary: pref) >> setValue 11
var pref = Dictionary
						saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 8
					} else {
						if(album == ""${mainDict.key(emptytext)}"") {
							saveToCameraRoll(image: media) >> saveToCameraRoll 1
						} else {
							if(OS > 0) {
								createAlbum(photos: media, name: "${album}") >> createAlbum
							} else {
								saveToCameraRoll(image: media, album: album) >> saveToCameraRoll 2
							}
						}
					} >> IFResult 59
					valueFor(key: "selection.9", dictionary: pref) >> ⤷Open Photos after Save
				} >> IFResult 60
				if(tweetDict != nil) {
					menu(, [) {
					case("mainDict (getsub)"):
						repeatEach(tweetDict) {
							getItemFromList(list: media, type: Item At Index, index: Repeat Index 2) >> getItemFromList 5
							getName() >> getName
							setName(input: Repeat Item 2, name: "${Name}.srt")
						} >> RepeatResult 9
						share(file: Repeat Results) >> share 1
					case("mainDict (skip)"):
					}
				}
				valueFor(key: "selection.11", dictionary: pref) >> ⤷Show Notification
			}
/*
◢◣		DOWNLOAD


*/
		} >> IFResult 61
		if(command != ""${mainDict.key(quit)}"") { >> IFResult 62
			if(command == ""${mainDict.key(settings)}"") { >> IFResult 63
/*


◥◤		SETTINGS
*/
var menu = Variable
				count(input: pref) >> count 2
				repeat(30) {
					if(menu ==) {
						valueFor(key: "savefolder", dictionary: pref) >> valueFor 2
						if(Dictionary Value != nil) {
							valueFor(key: "folderlocation", dictionary: pref) >> valueFor 3
							if(Dictionary Value == 1) {
								text(text: "${mainDict.key(onmy)}${Variable.key(onmy)}") >> text 7
							} else {
								if(Dictionary Value == 2) {
									text(text: "iCloud")
								} else {
									text(text: "iCloud Drive/Shortcuts")
								}
							} >> IFResult 64
var F6F2CB15-A57F-4D44-AB28-0A332451B84D = """
￼‘￼/￼’"""
text("${F6F2CB15-A57F-4D44-AB28-0A332451B84D}")
						} >> folderpath
						valueFor(key: "album", dictionary: pref) >> valueFor 4
						if(Dictionary Value != nil) {
							if(Dictionary Value == ""${mainDict.key(emptytext)}"") {
								valueFor(key: "recents", dictionary: mainDict)
							} >> IFResult 65
var 7A66A69E-6890-4EA9-A279-4BC641990449 = """
￼‘￼’"""
text("${7A66A69E-6890-4EA9-A279-4BC641990449}")
						} >> albumname
						repeatEach(mainDict) {
							valueFor(key: "selection.${Repeat Index 3}", dictionary: pref) >> valueFor 5
							if(Repeat Item 3 != nil) {
								valueFor(key: "option.${Dictionary Value}", dictionary: Repeat Item 3) >> valueFor 6
								text(text: "${Repeat Item 3.as(Dictionary).key(title)}　➤　${Variable.as(Dictionary).key(title)}") >> text 8
							} else {
								valueFor(key: "option.${Dictionary Value}", dictionary: mainDict) >> valueFor 7
								text(text: "${Dictionary Value}  ${ActionOutput}")
							} >> IFResult 66
						} >> RepeatResult 10
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "Repeat Results";
                        OutputUUID = "1C0DD17D-B54B-4639-A988-823743B42ED7";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = goback;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 1
						choose(list: List, prompt: "${mainDict.key(msg.settingprompt)}${Variable.key(msg.settingprompt)}${albumname}") >> choose 4
						if(Chosen Item == ""${mainDict.key(goback)}"") {
							if(input != nil) {
var command = Variable
							} >> IFResult 67
var menu = Variable
						} else {
							repeat(Count) {
								valueFor(key: "prefstring.${Repeat Index 3}.title", dictionary: mainDict) >> valueFor 8
								if(Chosen Item .contains ""${Dictionary Value}"") {
									number(value: Repeat Index 3) >> number 5
								} >> IFResult 68
							} >> RepeatResult 11
							valueFor(key: "selection.${Number}", dictionary: pref) >> valueFor 9
							text(text: "${Dictionary Value}${ActionOutput}") >> text 9
							if(Text .between 17...18) {
var tempdict = Variable
								if(Text == 17) {
									filterFiles()
								} else {
									filterFiles() >> filterFiles
								} >> IFResult 69
								repeatEach(If Result) {
									valueFor(key: "${Repeat Item 3}", dictionary: pref) >> valueFor 10
									setValue(key: "${Repeat Item 3}", value: "${Dictionary Value}", dictionary: tempdict) >> setValue 12
var tempdict = Dictionary
								} >> RepeatResult 12
var pref = Variable
							} >> IFResult 70
							valueFor(key: "prefstring.${Number}.option", dictionary: mainDict) >> valueFor 11
							if(Dictionary Value == nil) {
								valueFor(key: "option", dictionary: mainDict)
							} >> OptionString
							count(input: OptionString) >> count 3
							valueFor(key: "selection.${Number}", dictionary: pref) >> valueFor 12
							math(input: Dictionary Value, operation: …, scientific: Modulus) >> math 9
							math(input: Calculation Result, operand: "1") >> NewOption
							repeatEach(pref) {
								if(Repeat Index 3 == Number) {
//Unable to get shortcuts action is.workflow.actions.getvariable
								}
							} >> RepeatResult 13
							setValue(key: "selection", value: "${Repeat Results.as(Number)}", dictionary: pref) >> setValue 13
var pref = Dictionary
							saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 9
						} >> IFResult 71
					} >> IFResult 72
				} >> RepeatResult 14
/*
◢◣		SETTINGS


*/
			} >> IFResult 73
			if(command != ""${mainDict.key(download)}"") {
/*


◥◤		MENU
*/
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
				if(Output != nil) {
					wait(seconds: Output)
					runShortcut(name: "HiRes Twitter")
					exit()
				}
				if(Output != nil) {
var 909973A0-4BE4-4801-B445-AD47CF4E34C4 = """￼
￼
"""
text("${909973A0-4BE4-4801-B445-AD47CF4E34C4}")
				} else {
					valueFor(key: "msg.noaccountprompt", dictionary: mainDict)
				} >> IFResult 74
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = contact;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = account;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = settings;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = getlink;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = quit;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 2
				choose(list: List, prompt: "${If Result}") >> choose 5
var command = Chosen Item
			} >> IFResult 75
			if(command == ""${mainDict.key(account)}"") { >> IFResult 76
/*


◥◤		ACCOUNT
*/
				alert(alert: "${mainDict.key(msg.accountprompt)}")
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
				exit()
			} >> IFResult 77
			if(command == ""${mainDict.key(getlink)}"") { >> IFResult 78
/*


◥◤		GET CLIPBOARD
*/
				getClipboard() >> getClipboard
				matchText(text: "${Clipboard}", regex: "twitter\.com/|t\.co/") >> matchText 1
				if(Matches != nil) {
					runShortcut(name: "HiRes Twitter", input: Clipboard) >> runShortcut
					exit()
				} else {
					alert(alert: "${Clipboard}", title: "${mainDict.key(msg.noclipboard)}", cancel: false)
				}
			}
			if(command == ""${mainDict.key(contact)}"") { >> IFResult 79
/*


◥◤		CONTACT
*/
				openURL(url: mainDict)
				exit()
			} >> IFResult 80
/*
◢◣		NOT QUIT


*/
		} >> IFResult 81
		if(Update Menu Shown == nil) { >> IFResult 82
/*


◥◤		UPDATE
*/
			if(version .contains ""${mainDict.as(Dictionary).key(version)}"") {
				menu(, [) {
				case("mainDict (gotoweb)"):
					openURL(url: mainDict)
					exit()
				case("mainDict (downloadupdate)"):
					downloadURL(url: "${mainDict.key(downloadurl)}") >> downloadURL 1
					matchText(text: "${Contents of URL}", regex: "(?<="id":\D?)\d+") >> matchText 2
					expandURL(url: "https://routinehub.co/download/${Matches}/") >> expandURL 1
					replaceText(input: "${Expanded URL}", find: "^.+icloud.com/", replace: "shortcuts://", isRegex: true) >> replaceText 5
					openURL(url: Updated Text)
					exit()
				case("mainDict (notnow)"):
					number(value: 1) >> Update Menu Shown
				} >> MenuResult 3
			}
		}
/*
◢◣		NOT QUIT


*/
	} >> IFResult 83
} >> RepeatResult 15
if(⤷Open Photos after Save == 1) {
	openApp(id: "com.apple.mobileslideshow")
} >> IFResult 84
if(⤷Show Notification == 1) {
	sendNotification(body: "${Media Info}", sound: false) >> sendNotification
} >> IFResult 85
