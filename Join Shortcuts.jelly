import Shortcuts
#Color: Red, #Icon: 3DSquareStack

/*
Join shortcuts without pre-setup
2022-10-09 	v1.0.2 	u/gluebyte
https://routinehub.co/shortcut/10038
*/
randomNumber(min: 1, max: 2) >> randomNumber
if(Random Number == 1) {
	getIP() >> getIP
	if(Current IP Address != nil) {
		downloadURL(url: "https://updatecheck.gluebyte.workers.dev/?id=F14A3404") >> downloadURL
		if(Contents of URL .contains "2022-10-09") {
			menu(, [🌏  Go to RoutineHub, 👾  Download Update, ⮐  Not Now]) {
			case("🌏  Go to RoutineHub"):
				openURL(url: "https://routinehub.co/shortcut/10038/")
				exit()
			case("👾  Download Update"):
				downloadURL(url: "https://routinehub.co/api/v1/shortcuts/10038/versions/latest") >> downloadURL 1
				matchText(text: "${Contents of URL}", regex: "(?<="id":\D?)\d+") >> matchText
				expandURL(url: "https://routinehub.co/download/${Matches}/") >> expandURL
				replaceText(input: "${Expanded URL}", find: "^.+icloud.com/", replace: "shortcuts://", isRegex: true) >> replaceText
				openURL(url: Updated Text)
				exit()
			case("⮐  Not Now"):
			} >> MenuResult
		} >> IFResult
	}
} >> IFResult 1
alert(alert: "🌟 Let’s select main shortcut first.", tancel: false)
runShortcut(name: "Shortcut Source Helper") >> runShortcut
if(Shortcut Result == nil) {
	exit()
} >> IFResult 2
getFileOfType(input: Shortcut Result, type: "public.json") >> mainshortcut
var E4F54604-2672-4812-9E9C-34829C19C1A7 = """let q = d.WFWorkflowImportQuestions.map(q => q.ActionIndex);
let last = d.WFWorkflowActions.length;
let c = {"0":0};
c[last] = last;
let comments = d.WFWorkflowActions.map((a,i) => (a.WFWorkflowActionIdentifier === 'is.workflow.actions.comment' && i != last-1) ? `(${i+1}) ${(['', undefined].includes(t = a.WFWorkflowActionParameters.WFCommentActionText) ? '[empty]' : t).trim().replace(/\s+/g,' ')}` : false).filter(a => a != false);
comments.forEach(a => { n = a.match(/\((\d+)/)[1]; c[n] = parseInt(n); });
document.body.textContent = encodeURIComponent(JSON.stringify({q:q, c:c, last:last, comments:comments}));"""
text("${E4F54604-2672-4812-9E9C-34829C19C1A7}")
url(url: "data:text/html;charset=utf-8,<body/><script>const d=${mainshortcut};${ActionOutput}</script>") >> url
encodeURL(url: "${URL.as(RichText)}") >> encodeURL
setValue(key: "shortcut", value: "${mainshortcut.as(Dictionary)}", dictionary: URL Encoded Text) >> setValue
var dict = Dictionary
list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{18, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                PropertyName = Name;
                                PropertyUserInfo = WFItemName;
                                Type = WFPropertyVariableAggrandizement;
                            }
                        );
                        OutputName = mainshortcut;
                        OutputUUID = "F1C9D0C0-80B5-4EA9-A793-FE518E25A164";
                        Type = ActionOutput;
                    };
                };
                string = "(0) Beginning of \U2018\Ufffc\U2019";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                CoercionItemClass = WFDictionaryContentItem;
                                Type = WFCoercionVariableAggrandizement;
                            },
                                                        {
                                DictionaryKey = comments;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = dict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{1, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = last;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = dict;
                    };
                    "{12, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                PropertyName = Name;
                                PropertyUserInfo = WFItemName;
                                Type = WFPropertyVariableAggrandizement;
                            }
                        );
                        OutputName = mainshortcut;
                        OutputUUID = "F1C9D0C0-80B5-4EA9-A793-FE518E25A164";
                        Type = ActionOutput;
                    };
                };
                string = "(\Ufffc) End of \U2018\Ufffc\U2019";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list
var menu = List
if(dict == nil) {
var D8466E9A-92DF-4967-AB63-4357C925CB15 = """[To insert shortcuts in the middle, add comment actions.]
"""
text("${D8466E9A-92DF-4967-AB63-4357C925CB15}")
} >> IFResult 3
dictionary({"0":"0","1":"1"})
repeat(20) {
	if(Number == nil) {
		choose(list: menu, prompt: "${nocomment}${ActionOutput}🎯  Insert ${another}shortcut after:", mll: $3) >> choose
		if(Chosen Item == "🏁  FINISH JOINING  🏁") {
			number(value: 1) >> number
		} else {
			matchText(text: "${Chosen Item}", regex: "(?<=^\()\d+") >> position
var addif = Dictionary
			if(Chosen Item .beginsWith "(0) Beginning") {
				number(value: 1)
			} >> IFResult 4
			if(Chosen Item .beginsWith ""(${dict.as(Dictionary).key(last)}) End"") {
				number(value: 1)
			} >> IFResult 5
			if(If Result == 1) {
				menu(💊  Put shortcut inside ‘If’ and ‘End If’?, [Yes, No]) {
				case("Yes"):
var addif = Dictionary
				case("No"):
				} >> MenuResult 1
			} else {
				filterFiles() >> filterFiles
var menu = Files
			} >> IFResult 6
			if(Repeat Index == 1) {
				list(items: (
    "\Ud83c\Udfc1  FINISH JOINING  \Ud83c\Udfc1",
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Type = Variable;
                        VariableName = menu;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 1
var menu = List
			} >> IFResult 7
//Unable to get shortcuts action is.workflow.actions.setvariable
			runShortcut(name: "Shortcut Source Helper") >> runShortcut 1
			if(Shortcut Result == nil) {
				exit()
			} >> IFResult 8
			getFileOfType(input: Shortcut Result, type: "public.json") >> subshortcut
			setValue(key: "name", value: "${subshortcut.get(Name)}") >> setValue 1
var 0764A6AD-30F1-460A-8083-5E9A23E11DD2 = """let uuidgen = () => ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15>>c/4).toString(16).toUpperCase());
(match = s.match(/"UUID":"[-0-9a-fA-F]{36,46}"/g)) && match.forEach(m => { s = s.split(m.slice(7)).join('"'+uuidgen()+'"') });
(match = [...new Set(s.match(/"GroupingIdentifier":"[0-9a-fA-F-]{36,46}"/g))]) && match.forEach(m => { s = s.split(m.slice(21)).join('"'+uuidgen()+'"') });
let actions = JSON.parse(s).WFWorkflowActions;
if (￼) {
	let uuid = uuidgen();
	actions = [{"WFWorkflowActionIdentifier":"is.workflow.actions.conditional","WFWorkflowActionParameters":{"WFInput":{"Type":"Variable","Variable":{"Value":{"VariableName":￼.name,"Type":"Variable"},"WFSerializationType":"WFTextTokenAttachment"}},"GroupingIdentifier":uuid,"WFControlFlowMode":0}}, ...actions, {"WFWorkflowActionIdentifier":"is.workflow.actions.conditional","WFWorkflowActionParameters":{"GroupingIdentifier":uuid,"WFControlFlowMode":2}}];
}
dict.shortcut.WFWorkflowActions.splice(dict.c['￼'], 0, ...actions);
let n = actions.length;
for (const k in dict.c) {
	if (k >= ￼) { dict.c[k] += n; }
}
dict.q.forEach((a, i) => { if (a >= ￼) {
	dict.shortcut.WFWorkflowImportQuestions[i].ActionIndex += n;
}});
document.body.textContent = encodeURIComponent(JSON.stringify(dict));"""
text("${0764A6AD-30F1-460A-8083-5E9A23E11DD2}")
			url(url: "data:text/html;charset=utf-8,<body/><script>let dict = ${subshortcut}; let s = JSON.stringify(${ActionOutput});${Text}</script>") >> url 1
			encodeURL(url: "${URL.as(RichText)}") >> encodeURL 1
var dict = URL Encoded Text
var 3980539C-A521-4E4A-BD10-E042472E0866 = """🎉  ‘￼’ inserted.
"""
text("${3980539C-A521-4E4A-BD10-E042472E0866}")
			text(text: "another ") >> another
			nothing()
		} >> IFResult 9
	}
} >> RepeatResult
setName(input: dict, name: "${mainshortcut.get(Name)}.json") >> setName
getFileOfType(input: Renamed Item, type: "com.apple.plist") >> getFileOfType
runShortcut(name: "Shortcut Source Helper", input: File of Type) >> runShortcut 2
