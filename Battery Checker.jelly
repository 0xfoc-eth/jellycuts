import Shortcuts
#Color: green, #Icon: battery

/*
【Usage】
①In the Settings app, select "Privacy and security">"Analytics & Improvements" > "Analysis Data" > "Analytics-20xx～".

②Select this recipe from the "Share" button.

⚠️If the result “Null”, it means that the data does not exist in the analyzed data.
*/
dictionary({"Name":"Battery Checker","Version":"3.2","RH ID":"7696","Author":"thetheorier"})
if(ShortcutInput == nil) {
	menu(
This recipe can be run from the "Analytics Data" page in the Setting app.

Go to the "Analytics Data" page, open the file that starts with "Analytics-20xx" and click the Share button to run this recipe.

If you cannot find such a file, or if "Share iPhone Analytics" is disabled, you will need to enable it and wait at least one day.
, [Go to Setting app, Dismiss]) {
	case("Go to Setting app"):
		openURL(url: "prefs:root=Privacy&path=PROBLEM_REPORTING") >> openURL
	case("Dismiss"):
		exit()
	} >> MenuResult
} else {
	setName(input: ShortcutInput, name: "a.txt") >> setName
	matchText(text: "${名称変更された項目}", regex: "(?<=AlgoChemID\"\:).*?.{4}", caseSensitive: true) >> AlgoChemID
	if(AlgoChemID == nil) {
		alert(alert: "
It appears that the target analysis data does not include the number of "Cycle Count" and other information.

[selected]
${ShortcutInput.get(Name)}
")
	} else {
var 24F106BD-96A5-4FD0-8546-E7BECE30F48F = """<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Battery Checker</title>
<style>
	.noline th,.noline td{
		border-right: none !important;
		border-left: none !important;
	}
</style>
<style>
body{
  font-size:fsizepx;
  font-family:"Avenir";
}
</style>
</head>
<body>
	<table class="noline"; style="margin:msizepx 0px";>
		<tr>
			<th style="text-align:left";>【Device】</th>
			<td>deNull</td>
		</tr>
		<tr>
			<th style="text-align:left";>【System】</th>
			<td>syNull</td>
		</tr>
		<tr>
			<th style="text-align:left";>【Day】</th>
			<td>daNull</td>
		</tr>
	</table>


	<table class="noline"; align="center" width="100%"; border="1"; cellpadding="5";>
		<tr style="text-align:center">
				<th width="th1%";></th>
				<th width="th2%">value</th>
				<th width="th2%">health</th>
		</tr>
		<tr style="text-align:center">
			<th>Cycle Count</th>
			<td>ccNull</td>
			<td>-</td>
		</tr>
		<tr style="text-align:center">
			<th>Average Temperature(℃)</th>
			<td>atNull</td>
			<td>-</td>
		</tr>
		<tr style="text-align:center">
			<th>Nominal Charge Capacity(mAh)</th>
			<td>ncNull</td>
			<td>npNull</td>
		</tr>
		<tr style="text-align:center">
			<th>Raw Max Capacity(mAh)</th>
			<td>raNull</td>
			<td>rpNull</td>
		</tr>
		<tr style="text-align:center">
			<th>SOC</th>
			<td>-</td>
			<td>soNull</td>
		</tr>
		<tr style="text-align:center">
			<th>MinFCC(mAh)</th>
			<td>mfNull</td>
			<td>mpNull</td>
		</tr>
		<tr style="text-align:center">
			<th>MinQMax(mAh)</th>
			<td>mqNull</td>
			<td>qpNull</td>
		</tr>
		<tr style="text-align:center">
			<th>Deflator</th>
			<td>-</td>
			<td>dfNull</td>
		</tr>
		<tr style="text-align:center">
			<th>Design Capacity(mAh)</th>
			<td>dcNull</td>
			<td>-</td>
		</tr>
		<tr style="text-align:center">
			<th>Max Capacity</th>
			<td>-</td>
			<td>maNull</td>
		</tr>
	</table>
</body>
</html>
"""
text("${24F106BD-96A5-4FD0-8546-E7BECE30F48F}")
var html = テキスト
		matchText(text: "${名称変更された項目}", regex: "(?<=timestamp\"\:\")\d{4}-\d{1,2}-\d{1,2}") >> matchText
		replaceText(input: "${html}", find: "daNull", replace: "${一致.as(Date)}") >> replaceText
var html = アップデートされたテキスト
		matchText(text: "${名称変更された項目}", regex: "(?<=os_version\"\:\").*?\)") >> matchText 1
		replaceText(input: "${html}", find: "syNull", replace: "${一致}") >> replaceText 1
var html = アップデートされたテキスト
		if(DeviceDetails == "iPhone") {
			replaceText(input: "${html}", find: "iPhone ", replace: "i") >> replaceText 2
		} >> IFResult
		if(DeviceDetails == "iPad") {
			replaceText(input: "${html}", find: "iPhone", replace: "iPad") >> replaceText 3
		} >> IFResult 1
var html = “if文”の結果
var 5C9E2801-F22C-46B7-A153-7CFCB0A507A3 = """{
	"Apple Watch":{
		"Apple Watch 4 (40mm)"	:225,
		"Apple Watch 4 (44mm)"	:291,
		"Apple Watch 5 (40mm)"	:245,
		"Apple Watch 5 (44mm)"	:296,
		"Apple Watch SE (40mm)":245,
		"Apple Watch SE (44mm)":296,
		"Apple Watch 6 (40mm)"	:265,
		"Apple Watch 6 (44mm)"	:303,
		"Apple Watch 7 (41mm)"	:284,
		"Apple Watch 7 (45mm)"	:309,
		"Apple Watch 8 (41mm)"	:282,
		"Apple Watch 8 (45mm)"	:308,
		"Apple Watch SE 2 (40mm)"	:245,
		"Apple Watch SE 2 (44mm)"	:296,
		"Apple Watch Ultra"		:542
	},
	"iPhone":{
		"iPhone 8"			:1821,
		"iPhone 8 Plus"		:2691,
		"iPhone 11"			:3110,
		"iPhone 11 Pro"		:3046,
		"iPhone 11 Pro Max"	:3969,
		"iPhone 12"			:2815,
		"iPhone 12 mini"		:2227,
		"iPhone 12 Pro"		:2815,
		"iPhone 12 Pro Max"	:3687,
		"iPhone 13"			:3227,
		"iPhone 13 mini"		:2406,
		"iPhone 13 Pro"		:3095,
		"iPhone 13 Pro Max"	:4352,
		"iPhone 14"			:3279,
		"iPhone 14 Plus"		:4325,
		"iPhone 14 Pro"		:3200,
		"iPhone 14 Pro Max"	:4323,
		"iPhone SE 2"		:1821,
		"iPhone SE 3"		:2018,
		"iPhone X"			:2716,
		"iPhone XR"			:2942,
		"iPhone XS"			:2658,
		"iPhone XS Max"		:3174,
		"iPhone 15"			:3877,
		"iPhone 15 Plus"		:4912,
		"iPhone 15 Pro"		:3650,
		"iPhone 15 Pro Max"	:4852
	},
	"iPad":{
		"iPad 5"	:8827,
		"iPad 6"	:8827,
		"iPad 7"	:8827,
		"iPad 8"	:8686,
		"iPad 9"	:8526
	},
	"iPad Air":{
		"iPad Air 3"	:8134,
		"iPad Air 4"	:7606,
		"iPad Air 5"	:7606
	},
	"iPad mini":{
		"iPad mini 5"	:5124,
		"iPad mini 6"	:5078
	},
	"iPad Pro":{
		"iPad Pro 12.9'' 1"	:10307,
		"iPad Pro 9.7''"		:7306,
		"iPad Pro 10.5''"		:8134,
		"iPad Pro 12.9'' 2"	:10307,
		"iPad Pro 11'' 1"		:7812,
		"iPad Pro 12.9'' 3"	:9720,
		"iPad Pro 11'' 2"		:7812,
		"iPad Pro 12.9'' 4"	:9720,
		"iPad Pro 11'' 3"		:7540,
		"iPad Pro 12.9'' 5"	:10566
	}
}"""
text("${5C9E2801-F22C-46B7-A153-7CFCB0A507A3}")
var dict = テキスト
		filterFiles() >> filterFiles
		choose(list: ファイル, prompt: "Select Model") >> choose
		keysFrom(dictionary: dict) >> keysFrom
		filterFiles() >> filterFiles 1
		choose(list: ファイル, prompt: "Select Device") >> choose 1
var selected = 選択した項目
		keysFrom(dictionary: 辞書の値) >> keysFrom 1
var design_capacity = 辞書の値
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_CycleCount\"\:).*?\d+") >> matchText 2
		getItemFromList(list: 一致) >> getItemFromList
var CycleCount = リストからの項目
		if(CycleCount != nil) {
			replaceText(input: "${html}", find: "ccNull", replace: "${CycleCount}") >> replaceText 4
var html = アップデートされたテキスト
		} >> IFResult 2
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_AverageTemperature\"\:).*?\d+") >> matchText 3
		getItemFromList(list: 一致) >> getItemFromList 1
var AverageTemperature = リストからの項目
		if(AverageTemperature != nil) {
			replaceText(input: "${html}", find: "atNull", replace: "${AverageTemperature}") >> replaceText 5
var html = アップデートされたテキスト
		} >> IFResult 3
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_NominalChargeCapacity\"\:).*?\d+") >> matchText 4
		getItemFromList(list: 一致) >> getItemFromList 2
var NominalChargeCapacity = リストからの項目
		if(NominalChargeCapacity != nil) {
			replaceText(input: "${html}", find: "ncNull", replace: "${NominalChargeCapacity}") >> replaceText 6
			calculate(input: "(${design_capacity.as(Number)}*100)/${Variable.as(Number)}") >> calculate
			round(number: 計算結果, roundTo: Hundredths) >> round
			replaceText(input: "${アップデートされたテキスト}", find: "npNull", replace: "${端数処理済みの数値}") >> replaceText 7
var html = アップデートされたテキスト
		} >> IFResult 4
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_AppleRawMaxCapacity\"\:).*?\d+") >> matchText 5
		getItemFromList(list: 一致) >> getItemFromList 3
var RawMaxCapacity = リストからの項目
		if(RawMaxCapacity != nil) {
			replaceText(input: "${html}", find: "raNull", replace: "${RawMaxCapacity}") >> replaceText 8
			calculate(input: "(${design_capacity.as(Number)}*100)/${Variable.as(Number)}") >> calculate 1
			round(number: 計算結果, roundTo: Hundredths) >> round 1
			replaceText(input: "${アップデートされたテキスト}", find: "rpNull", replace: "${端数処理済みの数値}") >> replaceText 9
var html = アップデートされたテキスト
		} >> IFResult 5
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_DailyMaxSoc\"\:).*?\d+") >> matchText 6
		getItemFromList(list: 一致) >> getItemFromList 4
var MaxSOC = リストからの項目
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_DailyMinSoc\"\:).*?\d+") >> matchText 7
		getItemFromList(list: 一致) >> getItemFromList 5
var MinSOC = リストからの項目
		if(MinSOC != nil) {
			replaceText(input: "${html}", find: "soNull", replace: "${MinSOC}〜${Variable}") >> replaceText 10
var html = アップデートされたテキスト
		} >> IFResult 6
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_MinimumFCC\"\:).*?\d+") >> matchText 8
		getItemFromList(list: 一致) >> getItemFromList 6
var MinFCC = リストからの項目
		if(MinFCC != nil) {
			replaceText(input: "${html}", find: "mfNull", replace: "${MinFCC}") >> replaceText 11
			calculate(input: "${MinFCC.as(Number)}*100/${Variable.as(Number)}") >> calculate 2
			round(number: 計算結果, roundTo: Hundredths) >> round 2
			replaceText(input: "${アップデートされたテキスト}", find: "mpNull", replace: "${端数処理済みの数値}") >> replaceText 12
var html = アップデートされたテキスト
		} >> IFResult 7
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_MinimumQmax\"\:).*?\d+") >> matchText 9
		getItemFromList(list: 一致) >> getItemFromList 7
var MinQMax = リストからの項目
		if(MinQMax != nil) {
			replaceText(input: "${html}", find: "mqNull", replace: "${MinQMax}") >> replaceText 13
			calculate(input: "${MinQMax}*100/${Variable}") >> calculate 3
			round(number: 計算結果, roundTo: Hundredths) >> round 3
			replaceText(input: "${アップデートされたテキスト}", find: "qpNull", replace: "${端数処理済みの数値}") >> replaceText 14
var html = アップデートされたテキスト
		} >> IFResult 8
		replaceText(input: "${html}", find: "dcNull", replace: "${design_capacity}") >> replaceText 15
var html = アップデートされたテキスト
// Battery Health
		if(NominalChargeCapacity != nil) {
			if(RawMaxCapacity != nil) {
				calculate(input: "${NominalChargeCapacity}*100/${Variable}") >> calculate 4
				round(number: 計算結果, roundTo: Hundredths) >> round 4
				replaceText(input: "${html}", find: "dfNull", replace: "${端数処理済みの数値}") >> replaceText 16
var html = アップデートされたテキスト
			} >> IFResult 9
		} >> IFResult 10
		matchText(text: "${名称変更された項目}", regex: "(?<=last_value_MaximumCapacityPercent\"\:).*?\d+") >> matchText 10
		getItemFromList(list: 一致) >> getItemFromList 8
var Percent = リストからの項目
		if(Percent != nil) {
			replaceText(input: "${html}", find: "maNull", replace: "${Percent}") >> replaceText 17
var html = アップデートされたテキスト
		} >> IFResult 11
		replaceText(input: "${html}", find: "deNull", replace: "${selected}") >> replaceText 18
var html = アップデートされたテキスト
// Rich text size
		if(selected .contains "iPhone") {
			replaceText(input: "${html}", find: "fsize", replace: "55") >> replaceText 19
			replaceText(input: "${アップデートされたテキスト}", find: "msize", replace: "30") >> replaceText 20
			replaceText(input: "${アップデートされたテキスト}", find: "th1", replace: "60") >> replaceText 21
			replaceText(input: "${アップデートされたテキスト}", find: "th2", replace: "20") >> replaceText 22
		} else {
			replaceText(input: "${html}", find: "fsize", replace: "25") >> replaceText 23
			replaceText(input: "${アップデートされたテキスト}", find: "msize", replace: "25") >> replaceText 24
			replaceText(input: "${アップデートされたテキスト}", find: "th1", replace: "50") >> replaceText 25
			replaceText(input: "${アップデートされたテキスト}", find: "th2", replace: "25") >> replaceText 26
		} >> IFResult 12
var html = “if文”の結果
		replaceText(input: "${html}", find: "..Null", replace: "Null", isRegex: true) >> replaceText 27
		richTextFromHTML() >> richTextFromHTML
		showWebPage(url: "${HTMLからのリッチテキスト}") >> showWebPage
	} >> IFResult 13
} >> IFResult 14
